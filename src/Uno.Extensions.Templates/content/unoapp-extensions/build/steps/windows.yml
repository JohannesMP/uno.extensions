parameters:
# Azure subscription
- name: azure_subscription
  type: string
  default: ''
- name: major
  type: string
  default: '0'  
- name: minor
  type: string
  default: '0'
- name: package_id
  type: string
  default: 'release_Desktop'
- name: project_to_build
  type: string
  default: '' 
- name: project_folder
  type: string
  default: ''            
- name: project_platform
  type: string
  default: 'x86'  

  # *** [REQUIRED FOR GENERATING SIGNED .MSIX PACKAGE] ***
  #For Creating a valid PFX certificate:
  # 1.- Open a new powershell terminal as administrator and use this command: New-SelfSignedCertificate -DnsName {YOURCERT.NAME.COM} -CertStoreLocation cert:\LocalMachine\My
  # 2.-When Finished press Win + R and type  certlm.msc. Then go to Personal folder -> Certificates and you should be able to see your previously created certificate
  # 3.-Double Click it then go to Details tab. Click on the bottom right button 'Copy to file'. A wizard will open
  # 4.-On first page Click Next 
  #   -> Second page click "Yes, Export the private key" 
  #   -> Third page select third option "PKCS #12 (.PFX)" and click on Next 
  #   -> In Fourth page (Security) set a password for the certificate and click on Next
  #   -> In last page please set a Name for the certificate and select where to put it. Use a simple location like C:\
  # 5.-Last part consists in uploading the new pfx certificate to your azuredevops secure storage. See more details here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops
- name: certificate
  type: string
  default: ''       
- name: certificate_password
  type: string
  default: ''   
- name: certificate_alias
  type: string
  default: ''   
- name: sign_package
  type: string
  default: 'false'
- name: publish_artifacts
  type: string
  default: 'true'    
- name: compress_artifacts
  type: string
  default: 'true'      

steps:
    - task: DownloadSecureFile@1
      name: keyStore
      displayName: "Download .pfx from secure files"
      condition:  eq('${{ parameters.sign_package }}', 'true')
      inputs:
        secureFile: ${{ parameters.certificate }}

    # Compile Mobile
    - task: AzurePowerShell@5
      displayName: 'Build and Package'
      inputs:
        azureSubscription: '${{ parameters.azure_subscription }}' 
        ScriptType: 'inlineScript'
        Inline: |
            $path = vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe | select-object -first 1

            & $path /t:Restore ${{ parameters.project_to_build }} /p:Configuration=Release /p:Platform=${{ parameters.project_platform }}
            if ('true' -eq '${{ parameters.sign_package }}') {
              & $path ${{ parameters.project_to_build }} /p:Configuration=Release /p:Platform=${{ parameters.project_platform }} /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundle=Never /p:PackageCertificateKeyFile=$(keyStore.secureFilePath) /p:AppxPackageDir=".\bin\Release\" /p:GenerateAppxPackageOnBuild=true
            }else{
              & $path ${{ parameters.project_to_build }} /p:AppxPackageSigningEnabled=false /p:Configuration=Release /p:Platform=${{ parameters.project_platform }}  /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundle=Never /p:AppxPackageDir=".\bin\Release\" /p:GenerateAppxPackageOnBuild=true
            }

            $finalPackageFolder = ".\artifacts"
            Write-Host "Creating package folder: $finalPackageFolder"
            New-Item -ItemType Directory -Force -Path $finalPackageFolder

            if ('true' -eq '${{ parameters.publish_artifacts }}') {
              if ('true' -eq '${{ parameters.compress_artifacts }}') {
                Write-Host "Compressing final package"
                $finalPackageName = "$finalPackageFolder\${{ parameters.package_id }}(${{ parameters.project_platform }})_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber).zip"
                Compress-Archive -Path '${{ parameters.project_folder }}\bin\Release\*' -DestinationPath $finalPackageName
              }else{
                Copy-Item -Path '${{ parameters.project_folder }}\bin\Release\*' -Destination ".\artifacts" -recurse -Force  
              }
            }
        azurePowerShellVersion: 'LatestVersion'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: .\artifacts
        artifactName: ${{ parameters.package_id }}(${{ parameters.project_platform }})_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber)
    