parameters:
- name: major
  type: string
  default: '0'  
- name: minor
  type: string
  default: '0'
- name: package_id
  type: string
  default: 'release_ios'
- name: project_to_build
  type: string
  default: ''  
- name: project_folder
  type: string
  default: ''       
- name: publish_artifacts
  type: string
  default: 'true'
  #[OPTIONAL]
- name: bundle_identifier
  type: string
  default: ''  
  #[Required] Name of the .p12 certificate stored in secure files.
- name: certificate 
  type: string  
  default: ''
  #[Required] .p12 certificate password.   
- name: certificate_password 
  type: string  
  default: ''
  #[Required] The name of the distribution certificate . Ex Apple Development: Contoso Contoso (752234A22L)   
- name: codesign_key 
  type: string  
  default: ''
  #[Required] The provisioning profile name. This is the name you entered in the Apple Developer portal when creating your provisioning profile.   
- name: codesign_provision 
  type: string  
  default: ''      
  #[Required] Name of the provisioning profile stored in secure files          
- name: provisioning_profile 
  type: string  
  default: ''
      
steps:
    #Validate required parameters before executing any other script
    - task: PowerShell@2
      displayName: 'Verify required parameters'
      inputs:
        targetType: 'inline'
        script: |
            $errors = ''
            if ('' -eq '${{ parameters.project_to_build }}') { $errors = $errors + '[project_to_build] is not valid.' + "`r`n"  }
            if ('' -eq '${{ parameters.project_folder }}') { $errors = $errors + '[project_folder] is not valid' + "`r`n"  }
            if ('' -eq '${{ parameters.certificate }}') { $errors = $errors +'[certificate] is not valid. Please make sure the name of the .p12 certificate is correct and it exists in secure files' + "`r`n"  }
            if ('' -eq '${{ parameters.certificate_password }}') { $errors = $errors +'[certificate_password] is not valid. Please make sure you are using the correct .p12 certificate password' + "`r`n"  }
            if ('' -eq '${{ parameters.codesign_key }}') { $errors = $errors +'[codesign_key] is not valid. Please make sure the name of the name of the distribution certificate is correct. E.g. Apple Development: Contoso Contoso (752234A22L)' + "`r`n"  }
            if ('' -eq '${{ parameters.codesign_provision }}') { $errors = $errors +'[codesign_provision] is not valid. Please make sure the provisioning profile name is correct. This is the name you entered in the Apple Developer portal when creating your provisioning profile' + "`r`n"  }
            if ('' -eq '${{ parameters.provisioning_profile }}') { $errors = $errors +'[provisioning_profile] is not valid. Please make sure the .mobileprovision file is correct and it exists in secure files' + "`r`n"  }
            
            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }
        azurePowerShellVersion: 'LatestVersion'
        
    #############################################
    #                 IMPORTANT                 #
    #############################################
    #Uncomment this step if you see an error indicating the build its expecting a different version of XCode, update the correct number in the lines 55 and 56 and try again
    # - task: Bash@3
    #   name: 'Set XCode Version'
    #   inputs:
    #     targetType: 'inline'
    #   script: |
    #     sudo xcode-select -s "/Applications/Xcode_14.1.app"
    #     echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_14.1.app" >> $GITHUB_ENV            

    - task: InstallAppleCertificate@2
      displayName: 'Install .p12 certificate'
      inputs:
        certSecureFile:  '${{ parameters.certificate }}'
        certPwd: '${{ parameters.certificate_password }}'
      # Advanced
        keychain: 'temp' # 'default' | 'temp' | 'custom'. Required. Keychain. Default: temp.

    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install provisioning profile'
      inputs:
        provisioningProfileLocation: 'secureFiles' # 'secureFiles' | 'sourceRepository'. Required. Provisioning profile location. Default: secureFiles.
        provProfileSecureFile: '${{ parameters.provisioning_profile }}'

    # Download the provisioning profile from secure files with the name
    # specified in the parameter provisioning_profile
    # The script needs to do this because the previous task deletes the profile
    # after its done installing it  
    - task: DownloadSecureFile@1
      displayName: 'Download secure file ${{ parameters.provisioning_profile }}'
      name: provision_profile_file
      inputs:
        secureFile: '${{ parameters.provisioning_profile }}'  

    # This script will make sure BundleID is in place before trying to build the project.
    # If BundleId is not found in info.plist and .csproj this script will extract and use the bundleid
    # contained in provisioning profile instead.
    - task: PowerShell@2
      displayName: 'Find the Info.plist file and validate BundleID'
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          $bundleid = ${{ parameters.bundle_identifier }}
          
          Write-Host "Finding Package Plist (ie Info.plist). Set ios_plist_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "Info.plist" -Path "$(System.DefaultWorkingDirectory)"  -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "$manifest"     
          
          if (-not ([string]::IsNullOrEmpty($manifest))){
            if (([string]::IsNullOrEmpty('${{ parameters.bundle_identifier }}'))){
              #Extract BundleID from the provided provisioning profile
              Write-Host "Loading content"
              $content = Get-Content $(provision_profile_file.secureFilePath) -Raw
              Write-Host "Content loaded"
              $pattern = '<key>.*<\/key>\s*<string>.*<\/string>'
              Write-Host "Pattern: $pattern"
              $valuepattern = '<string>(.*)<\/string>'
              Write-Host "Value Pattern: $valuepattern"
              $matches = $content | Select-String $pattern -AllMatches
              Write-Host "Matches: $matches.Matches"
              $idkvp = ($matches.Matches | Where-Object {$_.Value.contains('application-identifier')}).Value
              Write-Host "ID key value pair: $idkvp"
              $idmatch = $idkvp | Select-String $valuepattern
              Write-Host "ID match: $idmatch"
              $id = $idmatch.Matches[0].Groups[1].Value
              Write-Host "ID: $id"
              $teamkvp = ($matches.Matches | Where-Object {$_.Value.contains('com.apple.developer.team-identifier')}).Value
              Write-Host "Team key value pair: $teamkvp"
              $teammatch = $teamkvp | Select-String $valuepattern
              Write-Host "Team match: $teammatch"
              $teamid = $teammatch.Matches[0].Groups[1].Value
              Write-Host "Team id: $teamid"
              $bundleid = $id.Replace($teamid + ".","")
              Write-Host "Bundle id : $bundleid"
              Write-Host "Extracted BundleId: $bundleid"
            }  
          }else{
            throw "Info.plist was not found. Please check this file is included in your iOS project and try again"
          }
          
          #Add BundleId to Info.plist if it does not exist
          $SEL = Select-String -Path $manifest -Pattern "<key>CFBundleIdentifier</key>"
          if ($SEL -ne $null)
          {
              Write-Host "Bundle ID already found in Info.plist"
          }
          else
          {
            if (-not ([string]::IsNullOrEmpty($bundleid))){
                Write-Host "Updating BundleID"
                $filecontent = Get-Content -Path $manifest -Raw
                $filecontent -replace "</dict>","
                <key>CFBundleIdentifier</key>
                <string>$bundleid</string>
            </dict>"| Set-Content -Path $manifest
                Get-Content $manifest -Raw
            }
          }
          
          #Replace .csproj default ApplicationId by valid BundleId if it is not in there yet
          $SEL = Select-String -Path ${{ parameters.project_to_build }} -Pattern "<ApplicationId>com.companyname.demo</ApplicationId>"
          if ($SEL -ne $null)
          {
            if (-not ([string]::IsNullOrEmpty($bundleid))){
                Write-Host "Updating ApplicationId in ${{ parameters.project_to_build }}"
                $filecontent = Get-Content -Path ${{ parameters.project_to_build }} -Raw
                $filecontent -replace "<ApplicationId>com.companyname.demo</ApplicationId>","<ApplicationId>$bundleid</ApplicationId>"| Set-Content -Path ${{ parameters.project_to_build }}
                Get-Content ${{ parameters.project_to_build }} -Raw
            }
          }
           
          
    # Compile Mobile
    - task: PowerShell@2
      displayName: 'Build and Package'
      inputs:
        targetType: 'inline'
        script: |
            Write-Host  ""
            Write-Host "Building ${{ parameters.package_id }}"
            dotnet publish  -c Release -p:CodesignProvision='${{ parameters.codesign_provision }}' -p:CodesignKey='${{ parameters.codesign_key }}' -p:TargetFramework=net6.0-ios /p:ArchiveOnBuild=true  -o ${{ parameters.project_folder }}\bin\Release ${{ parameters.project_to_build }} 

            $finalPackageFolder = "artifacts"
            Write-Host "Creating package folder: $finalPackageFolder"
            New-Item -ItemType Directory -Force -Path $finalPackageFolder

            if ('true' -eq '${{ parameters.publish_artifacts }}') {
                $finalPackageName = "$finalPackageFolder\${{ parameters.package_id }}_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber).zip"
                Compress-Archive -Path '${{ parameters.project_folder }}\bin\Release\*' -DestinationPath $finalPackageName
            }
        azurePowerShellVersion: 'LatestVersion'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: artifacts
        artifactName: ${{ parameters.package_id }}_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber)

    