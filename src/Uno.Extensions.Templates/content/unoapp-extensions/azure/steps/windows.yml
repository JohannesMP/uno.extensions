parameters:
- name: package_id
  type: string
  default: 'release_Windows'
- name: project_to_build
  type: string
  default: ''       
- name: project_platform
  type: string
  default: 'x64'  
  # *** [REQUIRED FOR GENERATING SIGNED .MSIX PACKAGE] ***
  #For Creating a valid PFX certificate for signing:
  # 1.- Open VisualStudio and create a new empty Windows Universal project
  # 2.- Open solution explorer and double click on Package.appxmanifest file 
  # 3.- Now you should see a bunch of tabs. Select the last one (Packaging)
  # 4.- Fill the editor field and click on "Select Certificate" and a new popup should open
  # 5.- Click on "Create" and a second popup should open
  # 6.- Make sure the "Editor Name" field is correct and DO NOT put any password
  # 7.- Scroll down and click on "Ok" and second popup will close
  # 8.- Click on "Ok" again. At this point you should see in solution explorer the new certificate: "TemporaryKey.pfx"
  # 9.- Last part consists in uploading the new pfx certificate to your pipeline secure storage. See more details here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops
- name: certificate
  type: string
  default: ''       
- name: sign_package
  type: string
  default: 'false'
- name: publish_artifacts
  type: string
  default: 'true'    
- name: compress_artifacts
  type: string
  default: 'true'      

steps:
    #Validate required parameters before executing any other script
    - task: PowerShell@2
      displayName: 'Verify required parameters'
      inputs:
        targetType: 'inline'
        script: |
            $errors = ''
            if ('' -eq '${{ parameters.project_to_build }}') { $errors = $errors + '[project_to_build] is not valid.' + "`r`n"  }
            if ('true' -eq '${{ parameters.sign_package }}'){
              if ('' -eq '${{ parameters.certificate }}') { $errors = $errors + '[certificate] is not valid. Please make sure the name of the .pfx certificate is correct and it exists in secure files' + "`r`n"  }
            }

            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }

    - template: gitversion.yml

    - task: DownloadSecureFile@1
      name: keyStore
      displayName: "Download .pfx from secure files"
      condition:  eq('${{ parameters.sign_package }}', 'true')
      inputs:
        secureFile: ${{ parameters.certificate }}

    - ${{ if eq( parameters['sign_package'], 'true') }}:  
      - task: PowerShell@2
        displayName: 'Build and Package'
        inputs:
          targetType: 'filePath'
          filePath: 'build/scripts/windows_build.ps1'
          arguments: >
                  -project_to_build "${{ parameters.project_to_build }}"
                  -package_id "${{ parameters.package_id }}"
                  -project_platform "${{ parameters.project_platform }}"
                  -publish_artifacts "${{ parameters.publish_artifacts }}"
                  -compress_artifacts "${{ parameters.compress_artifacts }}"
                  -git_semVer "$(GitVersion.AssemblySemVer)"
                  -secure_file "$(keyStore.secureFilePath)"
                  -sign_package "${{ parameters.sign_package }}"
    - ${{ else }}: 
      - task: PowerShell@2
        displayName: 'Build and Package'
        inputs:
          targetType: 'filePath'
          filePath: 'build/scripts/windows_build.ps1'
          arguments: >
                  -project_to_build "${{ parameters.project_to_build }}"
                  -package_id "${{ parameters.package_id }}"
                  -project_platform "${{ parameters.project_platform }}"
                  -publish_artifacts "${{ parameters.publish_artifacts }}"
                  -compress_artifacts "${{ parameters.compress_artifacts }}"
                  -git_semVer "$(GitVersion.AssemblySemVer)"
                  -secure_file ""
                  -sign_package "${{ parameters.sign_package }}"


    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: .\artifacts
        artifactName: ${{ parameters.package_id }}(${{ parameters.project_platform }})_$(GitVersion.AssemblySemVer)
    