parameters:
- name: major
  type: string
  default: '0'  
- name: minor
  type: string
  default: '0'
- name: package_id
  type: string
  default: 'release_Wasm'
- name: project_to_build
  type: string
  default: ''
- name: project_folder
  type: string
  default: ''       
  # *** [REQUIRED FOR GENERATING SIGNED .APK PACKAGE] ***
  # For creating a valid .jks certificate:
  # 1.- Go to C:\ and open a powershell terminal as administrator
  # 2.- Copy and paste this command keytool –genkey –alias contoso -keyalg RSA –keystore cert.jks –keysize 2048 and execute it
  # 3.- You will be asked to answer some questions like Password, Alias, Country, etc for your certificate
  # 4.-Last part consists in converting the certificate to Base64 format, so navigate to C:\ and copy and paste this command: [convert]::ToBase64String((Get-Content -path "C:\{YOUR_JKS_FILE.jks}" -Encoding byte))
  # 5.-Last part consists in uploading the new certificate to your azuredevops secure storage. See more details here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops
- name: certificate
  type: string
  default: ''       
- name: certificate_password
  type: string
  default: ''   
- name: certificate_alias
  type: string
  default: ''   
- name: sign_package
  type: string
  default: 'false'
- name: publish_artifacts
  type: string
  default: 'true'   
- name: compress_artifacts
  type: string
  default: 'true'       
- name: target_framework
  type: string
  default: 'net$ciTargetDotNetVersion$.0-android'  

steps:
    #Validate required parameters before executing any other script
    - task: PowerShell@2
      displayName: 'Verify required parameters'
      inputs:
        targetType: 'inline'
        script: |
            $errors = ''
            if ('' -eq '${{ parameters.project_to_build }}') { $errors = $errors + '[project_to_build] is not valid.' + "`r`n"  }
            if ('' -eq '${{ parameters.project_folder }}') { $errors = $errors + '[project_folder] is not valid' + "`r`n"  }
            if ('true' -eq '${{ parameters.sign_package }}'){
              if ('' -eq '${{ parameters.certificate }}') { $errors = $errors + '[certificate] is not valid. Please make sure the name of the .jks certificate is correct and it exists in secure files' + "`r`n"  }
              if ('' -eq '${{ parameters.certificate_password }}') { $errors = $errors + '[certificate_password] is not valid.' + "`r`n"  }
              if ('' -eq '${{ parameters.certificate_alias }}') { $errors = $errors + '[certificate_alias] is not valid' + "`r`n"  }
            }

            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }
        azurePowerShellVersion: 'LatestVersion'

    - task: DownloadSecureFile@1
      name: keyStore
      displayName: "Download .jks from secure files"
      condition:  eq('${{ parameters.sign_package }}', 'true')
      inputs:
        secureFile: ${{ parameters.certificate }}
      
    # Compile Mobile
    - task: PowerShell@2
      displayName: 'Build and Package'
      inputs:
        targetType: 'inline'
        script: |
            Write-Host "Building ${{ parameters.package_id }}"

            if ('true' -eq '${{ parameters.sign_package }}') {
              dotnet publish  -c Release -p:TargetFramework=${{ parameters.target_framework }}  -o ${{ parameters.project_folder }}\bin\Release ${{ parameters.project_to_build }} /p:AndroidSigningKeyStore=$(keyStore.secureFilePath) /p:AndroidSigningStorePass=${{ parameters.certificate_password }} /p:AndroidSigningKeyAlias=${{ parameters.certificate_alias }} 
            }else{
              dotnet publish  -c Release -p:TargetFramework=${{ parameters.target_framework }}  -o ${{ parameters.project_folder }}\bin\Release ${{ parameters.project_to_build }} 
            }

            $finalPackageFolder = "artifacts"
            Write-Host "Creating package folder: $finalPackageFolder"
            New-Item -ItemType Directory -Force -Path $finalPackageFolder

            if ('true' -eq '${{ parameters.publish_artifacts }}') {      
              if ('true' -eq '${{ parameters.compress_artifacts }}') {
                Write-Host "Compressing final package"
                $finalPackageName = "$finalPackageFolder\${{ parameters.package_id }}_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber).zip"
                Compress-Archive -Path '${{ parameters.project_folder }}\bin\Release\*' -DestinationPath $finalPackageName
              }else{
                Copy-Item -Path '${{ parameters.project_folder }}\bin\Release\*' -Destination "artifacts" -recurse -Force  
              }
            }
        azurePowerShellVersion: 'LatestVersion'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: artifacts
        artifactName: ${{ parameters.package_id }}_${{parameters.major}}.${{parameters.minor}}.$(Build.BuildNumber)
    