parameters:
- name: package_id
  type: string
  default: 'release_Wasm'
- name: project_to_build
  type: string
  default: '' 
- name: publish_artifacts
  type: string
  default: 'true'      
- name: compress_artifacts
  type: string
  default: 'true'      

steps:
    #Validate required parameters before executing any other script
    - task: PowerShell@2
      displayName: 'Verify required parameters'
      inputs:
        targetType: 'inline'
        script: |
            $errors = ''
            if ('' -eq '${{ parameters.project_to_build }}') { $errors = $errors + '[project_to_build] is not valid.' + "`r`n"  }
            
            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }

    - template: gitversion.yml

    - task: PowerShell@2
      displayName: 'Build and Package'
      inputs:
        targetType: 'inline'
        script: |
            $projectFolder = ''
            if ("${{ parameters.project_to_build }}".Contains('/') ){
              Write-Host "Adjusting proj folder"
              $projectFolder = "${{ parameters.project_to_build }}".SubString(0, "${{ parameters.project_to_build }}".LastIndexOf('/'))
            }
            Write-Host "Current proj folder is: $projectFolder"

            Write-Host  ""
            Write-Host "Building ${{ parameters.package_id }}"
            dotnet build  -c Release -o $projectFolder\bin\Release ${{ parameters.project_to_build }}

            $finalPackageFolder = "artifacts"
            Write-Host "Creating package folder: $finalPackageFolder"
            New-Item -ItemType Directory -Force -Path $finalPackageFolder

            if ('true' -eq '${{ parameters.publish_artifacts }}') {
              if ('true' -eq '${{ parameters.compress_artifacts }}') {
                Write-Host "Compressing final package"
                $finalPackageName = "$finalPackageFolder\${{ parameters.package_id }}_$(GitVersion.AssemblySemVer).zip"
                Compress-Archive -Path "$projectFolder\bin\Release\*" -DestinationPath $finalPackageName
              }else{
                Copy-Item -Path "$projectFolder\bin\Release\*" -Destination "artifacts" -recurse -Force  
              }
            }

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: artifacts
        artifactName: ${{ parameters.package_id }}_$(GitVersion.AssemblySemVer)
    