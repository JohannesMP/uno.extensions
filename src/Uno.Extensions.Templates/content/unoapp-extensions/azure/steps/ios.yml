parameters:
- name: package_id
  type: string
  default: 'release_ios'
- name: project_to_build
  type: string
  default: ''   
- name: publish_artifacts
  type: string
  default: 'true'
  #[OPTIONAL]
- name: bundle_identifier
  type: string
  default: ''  
  #[Required] Name of the .p12 certificate stored in secure files.
- name: certificate 
  type: string  
  default: ''
  #[Required] .p12 certificate password.   
- name: certificate_password 
  type: string  
  default: ''
  #[Required] The name of the distribution certificate . E.g. Apple Development: Contoso Contoso (752234A22L)   
- name: codesign_key 
  type: string  
  default: ''
  #[Required] The provisioning profile name. This is the name you entered in the Apple Developer portal when creating your provisioning profile.   
- name: codesign_provision 
  type: string  
  default: ''      
  #[Required] Name of the provisioning profile stored in secure files          
- name: provisioning_profile 
  type: string  
  default: ''
- name: target_framework
  type: string
  default: '$baseTargetFramework$-ios'  
      
steps:
    #Validate required parameters before executing any other script
    - task: PowerShell@2
      displayName: 'Verify required parameters'
      inputs:
        targetType: 'inline'
        script: |
            $errors = ''
            if ('' -eq '${{ parameters.project_to_build }}') { $errors = $errors + '[project_to_build] is not valid.' + "`r`n"  }
            if ('' -eq '${{ parameters.certificate }}') { $errors = $errors +'[certificate] is not valid. Please make sure the name of the .p12 certificate is correct and it exists in secure files' + "`r`n"  }
            if ('' -eq '${{ parameters.certificate_password }}') { $errors = $errors +'[certificate_password] is not valid. Please make sure you are using the correct .p12 certificate password' + "`r`n"  }
            if ('' -eq '${{ parameters.codesign_key }}') { $errors = $errors +'[codesign_key] is not valid. Please make sure the name of the name of the distribution certificate is correct. E.g. Apple Development: Contoso Contoso (752234A22L)' + "`r`n"  }
            if ('' -eq '${{ parameters.codesign_provision }}') { $errors = $errors +'[codesign_provision] is not valid. Please make sure the provisioning profile name is correct. This is the name you entered in the Apple Developer portal when creating your provisioning profile' + "`r`n"  }
            if ('' -eq '${{ parameters.provisioning_profile }}') { $errors = $errors +'[provisioning_profile] is not valid. Please make sure the .mobileprovision file is correct and it exists in secure files' + "`r`n"  }
            
            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }
            
    - template: gitversion.yml

    #############################################
    #                 IMPORTANT                 #
    #############################################
    #Uncomment this step if you see an error indicating the build its expecting a different version of XCode, update the correct number in the lines 54 and 55 and try again
    # - task: Bash@3
    #   name: 'Set XCode Version'
    #   inputs:
    #     targetType: 'inline'
    #   script: |
    #     sudo xcode-select -s "/Applications/Xcode_14.1.app"
    #     echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_14.1.app" >> $GITHUB_ENV            

    - task: InstallAppleCertificate@2
      displayName: 'Install .p12 certificate'
      inputs:
        certSecureFile:  '${{ parameters.certificate }}'
        certPwd: '${{ parameters.certificate_password }}'
      # Advanced
        keychain: 'temp' # 'default' | 'temp' | 'custom'. Required. Keychain. Default: temp.

    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install provisioning profile'
      inputs:
        provisioningProfileLocation: 'secureFiles' # 'secureFiles' | 'sourceRepository'. Required. Provisioning profile location. Default: secureFiles.
        provProfileSecureFile: '${{ parameters.provisioning_profile }}'

    # Download the provisioning profile from secure files with the name
    # specified in the parameter provisioning_profile
    # The script needs to do this because the previous task deletes the profile
    # after its done installing it  
    - task: DownloadSecureFile@1
      displayName: 'Download secure file ${{ parameters.provisioning_profile }}'
      name: provision_profile_file
      inputs:
        secureFile: '${{ parameters.provisioning_profile }}'  

    # This script will make sure BundleID is in place before trying to build the project.
    # If BundleId is not found in info.plist and .csproj this script will extract and use the bundleid
    # contained in provisioning profile instead.
    - task: PowerShell@2
      displayName: 'Find the Info.plist file and validate BundleID'
      inputs:
        targetType: 'filePath'
        filePath: 'build/scripts/ios_validate_bundleId.ps1'
        arguments: >
                -bundle_identifier "${{ parameters.bundle_identifier }}"
                -project_to_build "${{ parameters.project_to_build }}"
           
    - task: PowerShell@2
      displayName: 'Build and Package'
      inputs:
        targetType: 'filePath'
        filePath: 'build/scripts/ios_build_and_sign.ps1'
        arguments: >
                -project_to_build "${{ parameters.project_to_build }}"
                -package_id "${{ parameters.package_id }}"
                -codesign_provision "${{ parameters.codesign_provision }}"
                -codesign_key "${{ parameters.codesign_key }}"
                -target_framework "${{ parameters.target_framework }}"
                -publish_artifacts "${{ parameters.publish_artifacts }}"
                -git_semVer "$(GitVersion.AssemblySemVer)"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition:  eq('${{ parameters.publish_artifacts }}', 'true')
      inputs:
        targetPath: artifacts
        artifactName: ${{ parameters.package_id }}_$(GitVersion.AssemblySemVer)

    