param ([string]$bundle_identifier, 
        [string]$project_to_build)

$bundleid = $bundle_identifier

Write-Host "Finding Package Plist (ie Info.plist). Set ios_plist_filename parameter to override"
$manifest = (Get-ChildItem -Filter "Info.plist" -Path "$(System.DefaultWorkingDirectory)"  -Recurse | Select-Object -First 1 ).FullName
Write-Host "Found at $manifest"
Write-Host "$manifest"     

if (-not ([string]::IsNullOrEmpty($manifest))){
  if (([string]::IsNullOrEmpty("$bundle_identifier"))){
    #Extract BundleID from the provided provisioning profile
    Write-Host "Loading content"
    $content = Get-Content $(provision_profile_file.secureFilePath) -Raw
    Write-Host "Content loaded"
    $pattern = '<key>.*<\/key>\s*<string>.*<\/string>'
    Write-Host "Pattern: $pattern"
    $valuepattern = '<string>(.*)<\/string>'
    Write-Host "Value Pattern: $valuepattern"
    $matches = $content | Select-String $pattern -AllMatches
    Write-Host "Matches: $matches.Matches"
    $idkvp = ($matches.Matches | Where-Object {$_.Value.contains('application-identifier')}).Value
    Write-Host "ID key value pair: $idkvp"
    $idmatch = $idkvp | Select-String $valuepattern
    Write-Host "ID match: $idmatch"
    $id = $idmatch.Matches[0].Groups[1].Value
    Write-Host "ID: $id"
    $teamkvp = ($matches.Matches | Where-Object {$_.Value.contains('com.apple.developer.team-identifier')}).Value
    Write-Host "Team key value pair: $teamkvp"
    $teammatch = $teamkvp | Select-String $valuepattern
    Write-Host "Team match: $teammatch"
    $teamid = $teammatch.Matches[0].Groups[1].Value
    Write-Host "Team id: $teamid"
    $bundleid = $id.Replace($teamid + ".","")
    Write-Host "Bundle id : $bundleid"
    Write-Host "Extracted BundleId: $bundleid"
  }  
}else{
  throw "Info.plist was not found. Please check this file is included in your iOS project and try again"
}

#Add BundleId to Info.plist if it does not exist
$SEL = Select-String -Path $manifest -Pattern "<key>CFBundleIdentifier</key>"
if ($SEL -ne $null)
{
    Write-Host "Bundle ID already found in Info.plist"
}
else
{
  if (-not ([string]::IsNullOrEmpty($bundleid))){
      Write-Host "Updating BundleID"
      $filecontent = Get-Content -Path $manifest -Raw
      $filecontent -replace "</dict>","
      <key>CFBundleIdentifier</key>
      <string>$bundleid</string>
  </dict>"| Set-Content -Path $manifest
      Get-Content $manifest -Raw
  }
}

#Replace .csproj default ApplicationId by valid BundleId if it is not in there yet
$SEL = Select-String -Path $project_to_build -Pattern "<ApplicationId>com.companyname.demo</ApplicationId>"
if ($SEL -ne $null)
{
  if (-not ([string]::IsNullOrEmpty($bundleid))){
      Write-Host "Updating ApplicationId in $project_to_build"
      $filecontent = Get-Content -Path $project_to_build -Raw
      $filecontent -replace "<ApplicationId>com.companyname.demo</ApplicationId>","<ApplicationId>$bundleid</ApplicationId>"| Set-Content -Path $project_to_build
      Get-Content $project_to_build -Raw
  }
}