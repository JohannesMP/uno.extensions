<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:res="TemplateTesteWPF.String.Resources"   
                    >


    <!--Global-->
    <Style TargetType="TextBlock" x:Key="TSTextBlockWizardTitle">
        <!--<Setter Property="FontSize" Value="{Binding Environment200PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />-->
        <Setter Property="FontSize" Value="14" />
        <!--<Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily" />
        <Setter Property="Foreground" Value="{Binding HeaderText" />-->
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>
    
    <Style TargetType="Grid" x:Key="TSGridBasePage">
        <Setter Property="Background" Value="Black" />
    </Style>
    <Style TargetType="Grid" x:Key="TSGridMainPage" BasedOn="{StaticResource TSGridBasePage}">
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource TSTextBlockWizardTitle}" x:Key="TSTextBlockWizardTitleSecondary">
        <!--<Setter Property="Foreground" Value="{StaticResource SecondaryColor}" />-->
    </Style>



    <Style TargetType="Grid" x:Key="TSGridSectionDividerHorizontal">
        <!--<Setter Property="Background" Value="{Binding SectionDivider, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding SectionDivider, Source={x:Static services:UIStylesService.Instance}}" />-->
        <Setter Property="Height" Value="1.5" />
    </Style>

    
    
    <Style TargetType="Button" x:Key="TSBaseButton">
        
        <!--<Setter Property="Foreground" Value="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding Button, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding ButtonBorder, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontSize" Value="{Binding Environment100PercentFontSize, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="FontFamily" Value="{Binding EnvironmentFontFamily, Source={x:Static services:UIStylesService.Instance}}" />-->
        
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource SecondaryColor}" />
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource SecondaryColor}" />-->
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondaryColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource SecondaryColor}" />
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource SecondaryColor}" />-->
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondaryColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource SecondaryColor}" />
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource SecondaryColor}" />-->
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondaryColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource SecondaryColor}" />
                <!--<Setter Property="TextElement.Foreground" Value="{StaticResource SecondaryColor}" />-->
                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonWindowButtons" BasedOn="{StaticResource TSBaseButton}">
        <Setter Property="Padding" Value="16,12,16,12" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <DrawingImage x:Key="TSIconRestoreWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <!--<DrawingGroup.Children>
                    <GeometryDrawing
                        Brush="{Binding ButtonText, Source={x:Static services:UIStylesService.Instance}}"
                        Geometry="M 10 7.9980469 H 7.9980469 V 10 H 0 V 2.0019531 H 2.0019531 V 0 H 10 Z m -2.9980469 -5 H 1.0009766 V 8.9990234 H 7.0019531 Z M 8.9990234 1.0009766 H 2.9980469 v 1.0009765 h 5 v 5 h 1.0009765 z" />
                </DrawingGroup.Children>-->
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconMaximizeWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <!--<DrawingGroup.Children>
                    <GeometryDrawing
                        
                        Geometry="M 10 0 V 10 H 0 V 0 Z M 8.9990234 1.0009766 H 1.0009766 v 7.9980468 h 7.9980468 z" />
                </DrawingGroup.Children>-->
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="TSIconCloseWindow">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <!--<DrawingGroup.Children>
                    <GeometryDrawing
                       
                        Geometry="M 5.7080078 5 10 9.2919922 9.2919922 10 5 5.7080078 0.70800781 10 0 9.2919922 4.2919922 5 0 0.70800781 0.70800781 0 5 4.2919922 9.2919922 0 10 0.70800781 Z" />
                </DrawingGroup.Children>-->
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>
    
    
    
    <Style TargetType="Image" x:Key="TSImageRestoreButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageMaximizeButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>

    <Style TargetType="Image" x:Key="TSImageCloseButtonIcon">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Stretch" Value="None" />
    </Style>
    
    
    <Style TargetType="Button" x:Key="TSButtonRestoreWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <!--<Setter Property="AutomationProperties.Name" Value="{x:Static res:ButtonRestore}" />-->
        <Setter Property="ToolTip" Value="{StaticResource res:ButtonRestore}" />
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconRestoreWindow}"
                   Style="{StaticResource TSImageRestoreButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="TSButtonMaximizeWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <Setter Property="AutomationProperties.Name" Value="{StaticResource res:ButtonMaximize}" />
        <Setter Property="ToolTip" Value="{StaticResource res:ButtonMaximize}" />
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconMaximizeWindow}"
                   Style="{StaticResource TSImageMaximizeButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="Button" x:Key="TSButtonCloseWindow" BasedOn="{StaticResource TSButtonWindowButtons}">
        <!--<Setter Property="AutomationProperties.Name" Value="{x:Static res:ButtonClose}" />
        <Setter Property="ToolTip" Value="{x:Static res.ButtonClose}" />-->
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource TSIconCloseWindow}"
                   Style="{StaticResource TSImageCloseButtonIcon}" />
            </Setter.Value>
        </Setter>
    </Style>












    <!--#region Thickness -->

    <Thickness x:Key="Margin_XS_LeftTopRightBottom">4,4,4,4</Thickness>
    <Thickness x:Key="Margin_XS_Left">4,0,0,0</Thickness>
    <Thickness x:Key="Margin_XS_Right">0,0,4,0</Thickness>
    <Thickness x:Key="Margin_XS_LeftRight">4,0,4,0</Thickness>
    <Thickness x:Key="Margin_XS_Bottom">0,0,0,4</Thickness>
    <Thickness x:Key="Margin_XS_Top">0,4,0,0</Thickness>
    <Thickness x:Key="Margin_XS_TopBottom">0,4,0,4</Thickness>

    <Thickness x:Key="Margin_S_Left">8,0,0,0</Thickness>
    <Thickness x:Key="Margin_S_Right">0,0,8,0</Thickness>
    <Thickness x:Key="Margin_S_LeftTopRightBottom">8,8,8,8</Thickness>
    <Thickness x:Key="Margin_S_LeftTop">8,8,0,0</Thickness>
    <Thickness x:Key="Margin_S_Top">0,8,0,0</Thickness>
    <Thickness x:Key="Margin_S_TopBottom">0,8,0,8</Thickness>
    <Thickness x:Key="Margin_S_Bottom">0,0,0,8</Thickness>

    <Thickness x:Key="Margin_M_Left">12,0,0,0</Thickness>
    <Thickness x:Key="Margin_M_LeftTopRightBottom">12,12,12,12</Thickness>
    <Thickness x:Key="Margin_M_LeftTopRight">12,12,12,0</Thickness>
    <Thickness x:Key="Margin_M_LeftTop">12,12,0,0</Thickness>
    <Thickness x:Key="Margin_M_LeftRight">12,0,12,0</Thickness>
    <Thickness x:Key="Margin_M_Right">0,0,12,0</Thickness>
    <Thickness x:Key="Margin_M_Top">0,12,0,0</Thickness>

    <Thickness x:Key="Margin_M_Left_S_TopBottom">12,8,0,8</Thickness>



    <Thickness x:Key="Margin_M1_LeftRight">14,0,14,0</Thickness>
    <Thickness x:Key="Margin_M1_LeftRight_S_Top">14,8,14,0</Thickness>

    <Thickness x:Key="Margin_M2_LeftRight_S_Top">16,8,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_S_TopBottom">16,8,16,8</Thickness>
    <Thickness x:Key="Margin_M2_LeftTopRightBottom">16,16,16,16</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight">16,0,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_M_Top">16,12,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_M_TopBottom">16,12,16,12</Thickness>


    <Thickness x:Key="Margin_M2_LeftTopRight">16,16,16,0</Thickness>
    <Thickness x:Key="Margin_M2_LeftRight_L_Top">16,24,16,0</Thickness>

    <Thickness x:Key="Margin_M3_LeftTop">20,20,0,0</Thickness>
    <Thickness x:Key="Margin_M3_LeftTopRightBottom">20,20,20,20</Thickness>

    <Thickness x:Key="Margin_L_Left">24,0,0,0</Thickness>
    <Thickness x:Key="Margin_L_LeftTop">24,24,0,0</Thickness>
    <Thickness x:Key="Margin_L_LeftRight">24,0,24,0</Thickness>
    <Thickness x:Key="Margin_L_Top">0,24,0,0</Thickness>

    <Thickness x:Key="Margin_L_LeftRight_M_Top">24,12,24,0</Thickness>
    <Thickness x:Key="Margin_L_LeftRight_M2_Top">24,16,24,0</Thickness>

    <Thickness x:Key="CardBorderThickness">1.5,1.5,1.5,1.5</Thickness>

    <!--#endregion-->

</ResourceDictionary>